@page "/resources"

@using Microsoft.AspNetCore.Authorization
@using Connectly.Client.Components.VisualEffects.Buttons
@using Connectly.Client.Components.VisualEffects.Icons
@using Connectly.Client.Components.VisualEffects.Animations
@using Connectly.Client.Components.VisualEffects.Modals
@using Connectly.Domain.Enums

@rendermode InteractiveServer
@inject IJSRuntime Js
@* @attribute [Authorize(Roles = "Admin")] *@


<div class="bg-white full-height">

    @if (!IsLoadingResources)
    {
        <div class="p-3">

            <ConnectlyButton OnClick="@(() => OpenCreateResourceModal())">
                <ButtonIcon>
                    <ConnectlyIconAdd Stroke="white" /> New folder
                </ButtonIcon>
            </ConnectlyButton>

            <ConnectlyButton OnClick="@(() => OpenCreateDocumentModal())">
                <ButtonIcon>
                    <ConnectlyIconAdd Stroke="white" />New document
                </ButtonIcon>
            </ConnectlyButton>

        </div>
    }

    @if (AllResources.Any())
    {

        <table class="table table-striped table-hover table-light">
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col"><small>Name</small></th>
                    <th scope="col"><small>Created at</small></th>
                    <th scope="col"><small>Created by</small></th>
                    <th scope="col"><small>Context</small></th>
                    <th scope="col"><small>Type</small></th>
                    <th scope="col"><small>Description</small></th>
                    <th scope="col"><small>Documents</small></th>
                    <th scope="col"><small>Events</small></th>
                    <th scope="col"><small>Update</small></th>
                    <th scope="col"><small>Remove</small></th>
                </tr>
            </thead>

            <tbody>
                @foreach (var resource in AllResources)
                {
                    <tr>
                        <td><small>@(AllResources.IndexOf(resource) + 1).</small></td>

                        <td><small>@resource.ResourceName</small></td>

                        <td><small>@resource.CreatedAt.ToString("yyyy-MM-dd HH:mm")</small></td>

                        <td><small>@resource.CreatedBy</small></td>

                        <td><small>@resource.Context</small></td>

                        <td><small>@resource.ResourceType</small></td>



                        <td>
                            <ConnectlyButton OnClick=@(() => OpenResourceDescriptionModal(resource))>
                                <ButtonIcon>
                                    <ConnectlyIconText />
                                </ButtonIcon>
                            </ConnectlyButton>
                        </td>

                        <td>
                            <ConnectlyButton OnClick=@(() => OpenResourceDocumentsModal(resource))>
                                <ButtonIcon>
                                    <ConnectlyIconFile Fill="white" />
                                    <span class="badge bg-info text-dark">@(resource.DocumentCount)</span>
                                </ButtonIcon>
                            </ConnectlyButton>
                        </td>

                        <td>
                            <ConnectlyButton OnClick=@(() => OpenResourceEventsModal(resource))>
                                <ButtonIcon>
                                    <ConnectlyIconEvent Fill="white" />
                                    <span class="badge bg-info text-dark">@(resource.Events.Count)</span>
                                </ButtonIcon>
                            </ConnectlyButton>
                        </td>

                        <td>
                            <ConnectlyButton OnClick=@(() => OpenUpdateResourceModal(resource))>
                                <ButtonIcon>
                                    <ConnectlyIconEdit />
                                </ButtonIcon>
                            </ConnectlyButton>
                        </td>

                        <td>
                            <ConnectlyButton OnClick=@(() => OpenConfirmDeletionModal(resource))>
                                <ButtonIcon>
                                    <ConnectlyIconDelete Stroke="white" />
                                </ButtonIcon>
                            </ConnectlyButton>
                        </td>

                    </tr>
                }
            </tbody>
        </table>

    }
    else
    {
        if (IsLoadingResources)
        {
            <ConnectlyLoading Class="m-3"></ConnectlyLoading>
        }
        else
        {
            <div class="table-responsive py-2">
                <table class="table table-light table-hover">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col">Name</th>
                            <th scope="col"><small>Created at</small></th>
                            <th scope="col"><small>Created by</small></th>
                            <th scope="col">Description</th>
                            <th scope="col">Documents</th>
                            <th scope="col">Events</th>
                            <th scope="col">Update</th>
                            <th scope="col">Remove</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="9">No document folder found</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
    }

</div>

@if (ShowUpdateResourceModal)
{
    <ConnectlyModalNew Title="Update document folder" OnCancel="CloseUpdateResourceModal">

        <ModalBody>
            <div class="mb-3">
                <label for="ResourceName" class="form-label">Name</label>
                <input @bind="@Resource.ResourceName" type="text" class="form-control" id="ResourceName" />
            </div>

            <div class="mb-3">
                <label for="Context" class="form-label">Context</label>
                <input type="text" @bind="@Resource.Context" class="form-control" id="Context" />
            </div>

            <div class="mb-3">
                <label for="ResourceType" class="form-label">ResourceType</label>
                <select class="form-select" @bind="@Resource.ResourceType">
                    @foreach (var ResourceType in Enum.GetNames(typeof(ResourceType)))
                    {
                        if (Resource.ResourceType.ToString() == ResourceType)
                        {
                            <option value="@ResourceType" selected>@ResourceType</option>
                        }
                        else
                        {
                            <option value="@ResourceType">@ResourceType</option>
                        }
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="ResourceDescription" class="form-label">Description</label>
                <textarea @bind="@Resource.ResourceDescription" class="form-control" id="ResourceDescription"></textarea>
            </div>
        </ModalBody>

        <ModalFooter>
            <ConnectlyButton OnClick="@UpdateResourceInDbAsync">
                <ButtonIcon>
                    <ConnectlyIconSave Height="24" Width="24" />
                </ButtonIcon>
            </ConnectlyButton>
            <ConnectlyButton ButtonText="Cancel" OnClick="@CloseUpdateResourceModal"></ConnectlyButton>
        </ModalFooter>

    </ConnectlyModalNew>
}

@if (ShowCreateResourceModal)
{
    <EditForm Model="Resource" OnValidSubmit="AddResourceToDbAsync">
        <DataAnnotationsValidator />
        <ConnectlyModalNew Title="Create document folder" OnCancel="CloseCreateResourceModal">
            <ModalBody>

                <div class="mb-3">
                    <label for="ResourceName" class="form-label">Name</label>
                    <input @bind="@Resource.ResourceName" type="text" class="form-control" id="ResourceName" />
                    <ValidationMessage For="() => Resource.ResourceName" />
                </div>

                <div class="mb-3">
                    <label for="ResourceType" class="form-label">ResourceType</label>
                    <select class="form-select" @bind="@Resource.ResourceType">
                        <ValidationMessage For="() => Resource.ResourceType" />
                        @foreach (var ResourceType in Enum.GetNames(typeof(ResourceType)))
                        {
                            if (Resource.ResourceType.ToString() == ResourceType)
                            {
                                <option value="@ResourceType" selected>@ResourceType</option>
                            }
                            else
                            {
                                <option value="@ResourceType">@ResourceType</option>
                            }
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="ResourceDescription" class="form-label">Description</label>
                    <textarea @bind="@Resource.ResourceDescription" class="form-control" id="ResourceDescription"></textarea>
                    <ValidationMessage For="() => Resource.ResourceDescription" />
                </div>

                <ValidationSummary />

            </ModalBody>

            <ModalFooter>
                <ConnectlyButton Type="submit">
                    <ButtonIcon>
                        <ConnectlyIconSave Height="24" Width="24" />
                    </ButtonIcon>
                </ConnectlyButton>
                <ConnectlyButton ButtonText="Cancel" OnClick="@CloseCreateResourceModal"></ConnectlyButton>
            </ModalFooter>

        </ConnectlyModalNew>

    </EditForm>

}
@if (ShowCreateDocumentModal)
{
    <ConnectlyModalNew Title="Create document" OnCancel="CloseCreateDocumentModal">

        <ModalBody>
            @if (IsLoadingResources || ResourceExists)
            {
                <EditForm Model="Document">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>

                    <div class="mb-3">
                        @if (ResourceExists && !IsLoadingResources)
                        {
                            <label for="Resources" class="form-label">Document folder</label>
                            <InputSelect class="form-select" @bind-Value="@Document.Resource.ResourceId">


                                @foreach (var resource in AllResources)
                                {
                                    <option value="@resource.ResourceId">@resource.ResourceName</option>
                                }


                            </InputSelect>

                        }
                        @if (IsLoadingResources)
                        {
                            <label><span class="spinner-border spinner-border-sm text-primary me-2"></span>Document folder</label>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="DocumentType" class="form-label">Type</label>
                        <select class="form-select" id="DocumentType" @bind="@Document.FileType">
                            @foreach (var documentType in Enum.GetNames(typeof(FileType)))
                            {
                                <option value="@documentType">@documentType</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="formFile" class="form-label">File</label>
                        <InputFile OnChange="GetSelectedFileAsync" class="form-control" type="file" id="formFile" />
                    </div>

                    <div class="mb-3">
                        <label for="DocumentName" class="form-label">Filename <span class="text-muted">- will change file name if filled out</span></label>
                        <InputText @bind-Value="Document.NewFileName" type="text" class="form-control" id="DocumentName" />
                    </div>

                    <div class="mb-3">
                        <label for="DocumentDescription" class="form-label">Description<span class="text-muted"> - optional. A good name is preferred</span></label>
                        <InputTextArea @bind-Value="@Document.Description" class="form-control" id="DocumentDescription" />
                    </div>

                </EditForm>

            }
            @if (!IsLoadingResources && !ResourceExists)
            {
                <p>Create a document folder before creating a new document.</p>
            }

        </ModalBody>

        <ModalFooter>

            @if (IsLoadingResources || ResourceExists)
            {
                <ConnectlyButton OnClick="@AddDocumentToDbAsync">
                    <ButtonIcon>
                        <ConnectlyIconSave Height="24" Width="24" />
                    </ButtonIcon>
                </ConnectlyButton>
            }

            <ConnectlyButton ButtonText="Cancel" OnClick="@CloseCreateDocumentModal"></ConnectlyButton>
        </ModalFooter>

    </ConnectlyModalNew>
}

@if (ShowUpdateDocumentModal)
{
    <ConnectlyModalNew Title="Update document" OnCancel="CloseUpdateModal">
        <ModalBody>

            <div class="mb-3">

                @if (ResourceExists && !IsLoadingResources)
                {
                    <label for="Resources" class="form-label">Document folder</label>

                    <select class="form-select" @bind="@Document.Resource.ResourceId">
                        @foreach (var resource in AllResources)
                        {
                            <option value="@resource.ResourceId">@resource.ResourceName</option>
                        }
                    </select>
                }

                @if (IsLoadingResources)
                {
                    <label><span class="spinner-border spinner-border-sm text-primary me-2"></span>Document folder</label>
                }

            </div>

            <div class="mb-3">
                <label for="DocumentType" class="form-label">Type</label>
                <select class="form-select" id="DocumentType" @bind="@Document.FileType">
                    @foreach (var documentType in Enum.GetNames(typeof(FileType)))
                    {
                        <option value="@documentType">@documentType</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="DocumentDescription" class="form-label">Description</label>
                <textarea @bind="@Document.Description" class="form-control" id="DocumentDescription"></textarea>
            </div>

            <div class="mb-3">
                <label for="formFile" class="form-label">File <span class="text-muted">- will not delete old file if left empty</span></label>
                <InputFile OnChange="GetSelectedFileAsync" class="form-control" type="file" id="formFile" />

            </div>

            <div class="mb-3">
                <label for="DocumentName" class="form-label">File name <span class="text-muted">- will change file name if filled out</span></label>
                <input @bind="@Document.NewFileName" type="text" class="form-control" id="DocumentName" />
            </div>

        </ModalBody>

        <ModalFooter>
            <ConnectlyButton OnClick="@UpdateDocumentInDbAsync">
                <ButtonIcon>
                    <ConnectlyIconSave Height="24" Width="24" />
                </ButtonIcon>
            </ConnectlyButton>
            <ConnectlyButton ButtonText="Cancel" OnClick="@CloseUpdateModal"></ConnectlyButton>
        </ModalFooter>

    </ConnectlyModalNew>
}

@if (ShowConfirmDeletionModal)
{
    <ConnectlyModalNew Title="Confirm deletion" OnCancel="CloseConfirmDeletionModal">
        <ModalBody>

            @if (Resource.DocumentCount > 0)
            {
                <p>
                    Deletion of this document folder will also delete @Resource.DocumentCount @(Resource.DocumentCount == 1 ? "document" : "documents")
                </p>
                <p>
                    To proceed with this action click on remove document
                </p>
            }

        </ModalBody>

        <ModalFooter>
            @if (Resource.DocumentCount > 0)
            {

                <button class="btn btn-primary" @onclick="() => NavigateToOpenResourceDocumentsModal(Resource)">Remove Document</button>

                <button class="btn btn-primary" @onclick="CloseConfirmDeletionModal">Cancel</button>


            }
            else
            {
                <button class="btn btn-danger me-3" @onclick="DeleteResourceAsync">Delete</button>
            }

        </ModalFooter>
    </ConnectlyModalNew>
}

@if (ShowMessageModal)
{
    <ConnectlyModalNew OnCancel="CloseMessageModal" Title="Message">

        <ModalBody>
            @ModalMessage
        </ModalBody>

        <ModalFooter>
            <ConnectlyButton ButtonText="Close" OnClick="@CloseMessageModal"></ConnectlyButton>
        </ModalFooter>

    </ConnectlyModalNew>
}

@if (ShowDocumentsModal)
{
    <ConnectlyModalNew LargeModal="true" OnCancel="@CloseDocumentsModal" Title="Documents">
        <ModalBody>
            <ConnectlyButton ButtonText="All" OnClick="@ShowAllDocuments"></ConnectlyButton>
            <ConnectlyButton ButtonText="Documents" OnClick="@ShowOtherDocuments"></ConnectlyButton>
            <ConnectlyButton ButtonText="Images" OnClick="@ShowImages"></ConnectlyButton>

            <ul class="list-group mt-2">
                @if (AllDocuments.Count == 0)
                {
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            No documents yet.
                        </li>
                    }
                }
                @if (AllDocuments.Count > 0 && ShowAllDocumentsInDocumentsModal)
                {

                    foreach (var document in AllDocuments)
                    {

                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="p-2">
                                <div class="p-2">@document.FileName</div>
                                <small class="muted p-2" style="flex:1;">@document.FileType</small>
                            </div>

                            <div class="ml-auto p-2">

                                @if (string.IsNullOrEmpty(document.Description))
                                {
                                    <ConnectlyDescriptionButton Class="me-1" Type="button" Title="No description available">
                                        <ButtonIcon>
                                            <ConnectlyIconText />
                                        </ButtonIcon>
                                    </ConnectlyDescriptionButton>
                                }
                                else
                                {
                                    <ConnectlyDescriptionButton Class="me-1" Type="button" Title=@document.Description>
                                        <ButtonIcon>
                                            <ConnectlyIconText />
                                        </ButtonIcon>
                                    </ConnectlyDescriptionButton>
                                }

                                <ConnectlyButton OnClick=@(() => DownloadDocumentAsync(document))>
                                    <ButtonIcon>
                                        <ConnectlyIconDownload />
                                    </ButtonIcon>
                                </ConnectlyButton>

                                <ConnectlyButton OnClick=@(() => OpenUpdateDocumentModal(document))>
                                    <ButtonIcon>
                                        <ConnectlyIconEdit />
                                    </ButtonIcon>
                                </ConnectlyButton>

                                <ConnectlyButton OnClick=@(() => DeleteDocumentAsync(document))>
                                    <ButtonIcon>
                                        <ConnectlyIconDelete Stroke="white" />
                                    </ButtonIcon>
                                </ConnectlyButton>
                            </div>

                        </li>



                    }
                }
                @if (ShowImagesInDocumentsModal)
                {
                    foreach (var image in Images)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="p-2">
                                <div class="p-2">@image.FileName</div>
                                <small class="muted p-2" style="flex:1;">@image.FileType</small>
                            </div>

                            <div class="ml-auto p-2">

                                @if (string.IsNullOrEmpty(image.Description))
                                {
                                    <ConnectlyDescriptionButton Class="me-1" Type="button" Title="No description available">
                                        <ButtonIcon>
                                            <ConnectlyIconText />
                                        </ButtonIcon>
                                    </ConnectlyDescriptionButton>
                                }
                                else
                                {
                                    <ConnectlyDescriptionButton Class="me-1" Type="button" Title=@image.Description>
                                        <ButtonIcon>
                                            <ConnectlyIconText />
                                        </ButtonIcon>
                                    </ConnectlyDescriptionButton>
                                }

                                <ConnectlyButton OnClick=@(() => DownloadDocumentAsync(image))>
                                    <ButtonIcon>
                                        <ConnectlyIconDownload />
                                    </ButtonIcon>
                                </ConnectlyButton>

                                <ConnectlyButton OnClick=@(() => OpenUpdateDocumentModal(image))>
                                    <ButtonIcon>
                                        <ConnectlyIconEdit />
                                    </ButtonIcon>
                                </ConnectlyButton>

                                <ConnectlyButton OnClick=@(() => DeleteDocumentAsync(image))>
                                    <ButtonIcon>
                                        <ConnectlyIconDelete Stroke="white" />
                                    </ButtonIcon>
                                </ConnectlyButton>
                            </div>

                        </li>

                    }
                }
                @if (ShowOtherInDocumentsModal)
                {
                    foreach (var otherDocument in OtherDocuments)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="p-2">
                                <div class="p-2">@otherDocument.FileName</div>
                                <small class="muted p-2" style="flex:1;">@otherDocument.FileType</small>
                            </div>

                            <div class="mr-2">

                                @if (string.IsNullOrEmpty(otherDocument.Description))
                                {
                                    <ConnectlyDescriptionButton Class="me-1" Type="button" Title="No description available">
                                        <ButtonIcon>
                                            <ConnectlyIconText />
                                        </ButtonIcon>
                                    </ConnectlyDescriptionButton>
                                }
                                else
                                {
                                    <ConnectlyDescriptionButton Class="me-1" Type="button" Title=@otherDocument.Description>
                                        <ButtonIcon>
                                            <ConnectlyIconText />
                                        </ButtonIcon>
                                    </ConnectlyDescriptionButton>
                                }

                                <ConnectlyButton OnClick=@(() => DownloadDocumentAsync(otherDocument))>
                                    <ButtonIcon>
                                        <ConnectlyIconDownload />
                                    </ButtonIcon>
                                </ConnectlyButton>

                                <ConnectlyButton OnClick=@(() => OpenUpdateDocumentModal(otherDocument))>
                                    <ButtonIcon>
                                        <ConnectlyIconEdit />
                                    </ButtonIcon>
                                </ConnectlyButton>

                                <ConnectlyButton OnClick=@(() => DeleteDocumentAsync(otherDocument))>
                                    <ButtonIcon>
                                        <ConnectlyIconDelete Stroke="white" />
                                    </ButtonIcon>
                                </ConnectlyButton>
                            </div>

                        </li>

                    }
                }
                else
                {
                    @if (IsLoadingDocuments)
                    {
                        <ConnectlyLoading></ConnectlyLoading>
                    }
                }
            </ul>
        </ModalBody>

        <ModalFooter>
            <ConnectlyButton ButtonText="Close" OnClick="@CloseDocumentsModal"></ConnectlyButton>
        </ModalFooter>

    </ConnectlyModalNew>
}

@if (ShowEventsModal)
{
    <ConnectlyModalNew OnCancel="@CloseEventsModal" Title="Events coupled with this document folder" MediumModal="true">

        <ModalBody>
            @if (Resource.Events.Count > 0)
            {
                foreach (var eventItem in Resource.Events)
                {
                    <div class="card">
                        <div class="card-header">
                            <h5>@eventItem.EventName</h5>
                        </div>
                        <div class="card-body">
                            <p class="card-title">@eventItem.EventDate.ToString("yyyy-MM-dd")</p>
                            <a href="event/@eventItem.EventId" class="btn btn-outline-primary">Go to event</a>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No events</p>
            }
        </ModalBody>

        <ModalFooter>
            <ConnectlyButton ButtonText="Close" OnClick="@CloseEventsModal"></ConnectlyButton>
        </ModalFooter>

    </ConnectlyModalNew>

}
