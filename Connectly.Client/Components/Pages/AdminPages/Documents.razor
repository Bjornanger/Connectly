@page "/documents"
@rendermode InteractiveServer
@using Connectly.Domain.Enums
@using Microsoft.AspNetCore.Authorization
@using Connectly.Client.Components.VisualEffects.Buttons
@using Connectly.Client.Components.VisualEffects.Icons
@using Connectly.Client.Components.VisualEffects.Animations
@using Connectly.Client.Components.VisualEffects.Modals

@inject IJSRuntime Js
@* @attribute [Authorize(Roles = "Admin")] *@

<div class="bg-white full-height">

    @if (!IsLoadingDocuments)
    {
        <div class="p-3">

            <h5>All documents</h5>

            <ConnectlyButton OnClick="OpenCreateDocumentModal">
                <ButtonIcon>
                    <ConnectlyIconAdd Stroke="white" />
                </ButtonIcon>
            </ConnectlyButton>

        </div>
    }

    @if (AllDocuments.Any())
    {
        <div class="table-responsive">
            <table class="table table-light table-hover table-striped">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col" @onclick="SortByName" style="cursor:pointer" class="text-decoration-underline">Name</th>
                        <th scope="col">Created by</th>
                        <th scope="col" @onclick="SortByResourceName" style="cursor:pointer" class="text-decoration-underline">Document folder</th>
                        <th scope="col">Description</th>
                        <th scope="col">Download</th>
                        <th scope="col">Update</th>
                        <th scope="col">Delete</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var document in AllDocuments)
                    {
                        <tr>
                            <td>@(AllDocuments.IndexOf(document) + 1).</td>
                            <td>@document.FileName</td>
                            <td> <small>@document.CreatedBy</small> </td>
                            <td> <small>@document.Resource.ResourceName</small> </td>
                            <td>
                                <ConnectlyButton OnClick=@(() => OpenMessageModal($"{document.Description}"))>
                                    <ButtonIcon>
                                        <ConnectlyIconText />
                                    </ButtonIcon>
                                </ConnectlyButton>
                            </td>
                            <td>
                                <ConnectlyButton OnClick=@(() => DownloadDocumentAsync(document))>
                                    <ButtonIcon>
                                        <ConnectlyIconDownload />
                                    </ButtonIcon>
                                </ConnectlyButton>
                            </td>
                            <td>
                                <ConnectlyButton OnClick=@(() => OpenUpdateDocumentModal(document))>
                                    <ButtonIcon>
                                        <ConnectlyIconEdit />
                                    </ButtonIcon>
                                </ConnectlyButton>
                            </td>
                            <td>
                                <ConnectlyButton OnClick=@(() => DeleteDocumentAsync(document))>
                                    <ButtonIcon>
                                        <ConnectlyIconDelete Stroke="white" />
                                    </ButtonIcon>
                                </ConnectlyButton>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        if (IsLoadingDocuments)
        {
            <ConnectlyLoading Class="m-3"></ConnectlyLoading>
        }
        else
        {
            <div class="table-responsive py-2">
                <table class="table table-light table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Created by</th>
                            <th scope="col">Document folder</th>
                            <th scope="col">Description</th>
                            <th scope="col">Download</th>
                            <th scope="col">Update</th>
                            <th scope="col">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="7">No Documents found</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
    }

</div>

@if (ShowCreateDocumentModal)
{
    <ConnectlyModalNew Title="Create document" OnCancel="CloseCreateDocumentModal">

        <ModalBody>
            @if (IsLoadingResources || ResourceExists)
            {
                <EditForm Model="Document">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>

                    <div class="mb-3">
                        @if (ResourceExists && !IsLoadingResources)
                        {
                            <label for="Resources" class="form-label">Document folder</label>
                            <select class="form-select" @bind="@Document.Resource.ResourceId">

                                @foreach (var resource in AllResources)
                                {
                                    <option value="@resource.ResourceId">@resource.ResourceName</option>
                                }

                            </select>
                        }

                        @if (IsLoadingResources)
                        {
                            <label><span class="spinner-border spinner-border-sm text-primary me-2"></span>Document folder</label>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="DocumentType" class="form-label">Type</label>
                        <select class="form-select" id="DocumentType" @bind="@Document.FileType">
                            @foreach (var documentType in Enum.GetNames(typeof(FileType)))
                            {
                                <option value="@documentType">@documentType</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="formFile" class="form-label">File</label>
                        <InputFile OnChange="GetSelectedFileAsync" class="form-control" type="file" id="formFile" />
                    </div>

                    <div class="mb-3">
                        <label for="DocumentName" class="form-label">Filename <span class="text-muted">- will change file name if filled out</span></label>
                        <InputText @bind-Value="Document.NewFileName" type="text" class="form-control" id="DocumentName" />
                    </div>

                    <div class="mb-3">
                        <label for="DocumentDescription" class="form-label">Description<span class="text-muted"> - optional. A good name is preferred</span></label>
                        <InputTextArea @bind-Value="@Document.Description" class="form-control" id="DocumentDescription" />
                    </div>

                </EditForm>

            }
            @if (!IsLoadingResources && !ResourceExists)
            {
                <p>Create a document folder before creating a new document.</p>
            }

        </ModalBody>

        <ModalFooter>

            @if (IsLoadingResources || ResourceExists)
            {
                <ConnectlyButton OnClick="@AddDocumentToDbAsync">
                    <ButtonIcon>
                        <ConnectlyIconSave Height="24" Width="24" />
                    </ButtonIcon>
                </ConnectlyButton>
            }

            <ConnectlyButton ButtonText="Cancel" OnClick="@CloseCreateDocumentModal"></ConnectlyButton>
        </ModalFooter>

    </ConnectlyModalNew>
}

@if (ShowUpdateDocumentModal)
{
    <ConnectlyModalNew Title="Update document" OnCancel="CloseUpdateModal">
        <ModalBody>

            <div class="mb-3">

                @if (ResourceExists && !IsLoadingResources)
                {
                    <label for="Resources" class="form-label">Document folder</label>

                    <select class="form-select" @bind="@Document.Resource.ResourceId">
                        @foreach (var resource in AllResources)
                        {
                            <option value="@resource.ResourceId">@resource.ResourceName</option>
                        }
                    </select>
                }

                @if (IsLoadingResources)
                {
                    <label><span class="spinner-border spinner-border-sm text-primary me-2"></span>Document folder</label>
                }

            </div>

            <div class="mb-3">
                <label for="DocumentType" class="form-label">Type</label>
                <select class="form-select" id="DocumentType" @bind="@Document.FileType">
                    @foreach (var documentType in Enum.GetNames(typeof(FileType)))
                    {
                        <option value="@documentType">@documentType</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="DocumentDescription" class="form-label">Description</label>
                <textarea @bind="@Document.Description" class="form-control" id="DocumentDescription"></textarea>
            </div>

            <div class="mb-3">
                <label for="formFile" class="form-label">File <span class="text-muted">- will not delete old file if left empty</span></label>
                <InputFile OnChange="GetSelectedFileAsync" class="form-control" type="file" id="formFile" />

            </div>

            <div class="mb-3">
                <label for="DocumentName" class="form-label">File name <span class="text-muted">- will change file name if filled out</span></label>
                <input @bind="@Document.NewFileName" type="text" class="form-control" id="DocumentName" />
            </div>

        </ModalBody>

        <ModalFooter>
            <ConnectlyButton OnClick="@UpdateDocumentInDbAsync">
                <ButtonIcon>
                    <ConnectlyIconSave Height="24" Width="24" />
                </ButtonIcon>
            </ConnectlyButton>
            <ConnectlyButton ButtonText="Cancel" OnClick="@CloseUpdateModal"></ConnectlyButton>
        </ModalFooter>

    </ConnectlyModalNew>
}

@if (ShowMessageModal)
{
    <ConnectlyModalNew OnCancel="CloseMessageModal" Title="Message">

        <ModalBody>
            @ModalMessage
        </ModalBody>

        <ModalFooter>
            <ConnectlyButton ButtonText="Close" OnClick="@CloseMessageModal"></ConnectlyButton>
        </ModalFooter>

    </ConnectlyModalNew>
}